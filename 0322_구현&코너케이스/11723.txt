#include <iostream>
#include <vector>
#include <string>

using namespace std;
const int SIZE = 21; //집합에 입력되는 값의 범위

/**
 * [집합] - 단순 구현 문제
 *
 * ver1. 배열 사용 풀이
 * set()을 사용해서 매번 연산을 하면 시간이 굉장히 오래 걸려요.
 * 입력되는 x의 값이 1~20으로 범위가 매우 작기 때문에, 각 숫자가 집합에 들어있는 여부를 저장하는 배열을 이용합니다.
 *
 * 1. 집합에는 1~20의 숫자만 입력 or 제거됨 (=true or false)
 * 2. 크기 21의 bool 배열을 선언
 * 3. 입력은 true 처리, 제거는 false 처리
 */

int main() {
    ios::sync_with_stdio(false);//입출력 속도 빠르게 하기 위함
    cin.tie(NULL);

    int m, num; //연산의 수, 연산할 원소
    string cmd; //연산의 종류
    vector<bool> s(SIZE, false); //bool 자료형, 입력되는 숫자가 집합에 들어있는 여부 저장하는 배열. true: 들어있음

    cin >> m; //입력
    while (m--) { //입력 개수 만큼 반복
        cin >> cmd; //입력 종류 입력
        if (cmd == "all") { //all : 집합을 {1,2,..., 20}으로 바꾼다
            s.assign(SIZE, true); //모든 배열 원소를 true로 저장
            continue; //다시 반복문으로
        }
        if (cmd == "empty") {//empty : 집합을 공집합으로 바꾼다. 
            s.assign(SIZE, false); //모든 배열 원소를 false로 저장
            continue; // 다시 반복문으로
        }

        cin >> num; // 연산할 원소 입력 받음
        if (cmd == "add") { //집합에 x를 추가한다. 집합에 x가 이미 있는 경우에는 연산을 무시한다.
            s[num] = true; // 원소 추가
            continue; //다시 반복문으로
        }
        if (cmd == "remove") {//집합에서 x를 제거한다. 집합에 x가 없는 경우에는 연산을 무시한다.
            s[num] = false; //원소 제거
            continue;//다시 반복문
        }
        if (cmd == "check") { //집합에 x가 있으면 1을, 없으면 0을 출력한다. 
            cout << s[num] << '\n'; //bool 형을 출력하면 true: 1, false: 0으로 출력
            continue;//다시 반복문
        }
        if (cmd == "toggle") {//집합에 x가 있으면 x를 제거하고, 없으면 x를 추가한다.
            s[num] = !s[num]; //true일경우 false, false 일경우 true 저장
            continue; //다시 반복문
        }
    }
    return 0;
}