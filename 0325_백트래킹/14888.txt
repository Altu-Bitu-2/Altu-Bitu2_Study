#include <iostream>
#include <vector>

using namespace std;
const int INF_MAX = 1e9; //연산 결과의 최대 최소
const int SIZE = 11; //입력할 수 있는 수 개수의 최댓값

int n; //입력한 수의 개수
vector<int> num(SIZE + 1); //입력한 수의 배열
vector<int> expression(4); //0: +, 1: -, 2: *, 3:/  연산자의 배열
int max_value = -INF_MAX, min_value = INF_MAX; //최대 최소값 설정

void backtracking(int cnt, int sum) { //cnt: 수 인덱스, sum: 연산 결과
    if (cnt == n - 1) { //연산 모두 완료했다면 (기저조건)
        max_value = max(max_value, sum); //최댓값 저장
        min_value = min(min_value, sum); //최솟값 저장
        return;
    }
    for (int i = 0; i < 4; i++) { //연산자 검사
        if (expression[i]) { //연산자가 하나라도 있으면
            expression[i]--; //처리한 연산자 수는 감소
            int new_sum = 0; //새로운 합 0으로 초기화
            switch (i) { //연산자 종류에 따라
                case 0: //더하기 연산
                    new_sum = sum + num[cnt + 1]; //다음 인덱스의 수 연산
                    break; //반복문 빠져나감
                case 1://뺄셈
                    new_sum = sum - num[cnt + 1];
                    break;
                case 2: //곱하기
                    new_sum = sum * num[cnt + 1];
                    break;
                case 3: //나누기
                    new_sum = sum / num[cnt + 1];
                    break;
            }
            backtracking(cnt + 1, new_sum); //다음수의 인덱스, 새로운 합 저장할 함수
            expression[i]++; //연산자수 다시 그대로
        }
    }
}

/**
 * 연산자 모두 돌려보면서 배치한 후, 각 연산자에 따른 값 계산
 */

int main() {
    //입력
    cin >> n; //수의 개수
    for (int i = 0; i < n; i++) {//n개의 수로 이루어진 배열에
        cin >> num[i]; //수 입력 받음
    }
    for (int i = 0; i < 4; i++) { //4개의 정수 입력 받음. 각각 덧셈, 뺼셈, 곱셈, 나눗셈의 개수
        cin >> expression[i]; 
    }

    //연산
    backtracking(0, num[0]); //첫번째 수인덱스, 값

    //출력
    cout << max_value << '\n' << min_value; //최댓값, 최솟값 출력
    return 0;
}