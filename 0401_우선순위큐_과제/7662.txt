#include <iostream>
#include <set>

using namespace std;

/**
 * set 풀이
 *
 * set은 중복값이 제거되기 때문에 multiset을 이용하여 저장해야 함
 * multiset 또한 값을 넣으면 정렬이 바로 되기 때문에 이후의 정렬 과정이 따로 필요 없음
 */
int main() {
    ios::sync_with_stdio(false); //입출력 실행 속도 줄이기
    cin.tie(NULL);

    int t, k, n; //입력 데이터 개수, 적용할 연산의 개수, 연산할 수
    char cmd; //연산의 종류를 나타낼 문자

    cin >> t; //입력
    while (t--) { //테스트 실행
        multiset<int> ms; //중복 저장
        cin >> k; //입력
        while (k--) { //적용할 연산이 모두 이루어질 때까지
            //입력
            cin >> cmd >> n;

            //연산
            switch (cmd) { //입력이 무엇인지에 따라
                case 'I': //I 연산
                    ms.insert(n); //삽입연산
                    break;
                case 'D': //D 연산
                    if (ms.empty()) { //ms가 비어있다면 연산 무시
                        break; //조건문 빠져나가기
                    }
                    if (n == 1) { //최댓값 삭제
                        ms.erase(--ms.end()); //맨 뒤의 값
                    }
                    if (n == -1) { //최솟값 삭제
                        ms.erase(ms.begin()); //맨 앞의 값
                    }
                    break; //조건문 빠져나가기
            }
        }

        //출력
        if (ms.empty()) //Q가 비어있다면
            cout << "EMPTY\n"; //empty 출력
        else //아니라면
            cout << *(--ms.end()) << ' ' << *ms.begin() << '\n'; //남아있는 값 중 최댓값과 최솟값 출력
    }
}