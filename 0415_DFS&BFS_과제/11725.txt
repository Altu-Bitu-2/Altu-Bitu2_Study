#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> adj_list; //인접 노드 생성
vector<int> parent; //부모 노드 생성

void dfs_recursion(int prev, int curr) { //깊이우선탐색
    if (parent[curr]) { //부모노드가 있으면
        return; //리턴
    }
    parent[curr] = prev; //현재 노드의 부모가 이전노트가 됨
    for (int i = 0; i < adj_list[curr].size(); i++) { //이전 노트의 사이즈만큼
        dfs_recursion(curr, adj_list[curr][i]); //깊이우선탐색
    }
}

/**
 * [트리의 부모 찾기]
 *
 * 1번 노드에서 출발해서 탐색
 * 루트 노드에서 출발 했기 때문에, 현재 노드의 부모는 이전 노드가 된다.
 */

int main() {
    int n, a, b; //노트의 개수, 트리상에 연결된 두 정점

    //입력
    cin >> n;
    adj_list.assign(n + 1, vector<int>(0));  //인접노트 초기화
    parent.assign(n + 1, 0); //부모노드  초기화
    for (int i = 1; i < n; i++) { //노드의 개수만큼 입력 받음
        cin >> a >> b; //연결된 두 정점에 들어갈 수
        adj_list[a].push_back(b); //값 집어 넣기
        adj_list[b].push_back(a);
    }

    //연산
    dfs_recursion(1, 1); //1번 노드는 루트노드이므로, 부모를 자기 자신으로 설정

    //출력
    for (int i = 2; i <= n; i++) {
        cout << parent[i] << '\n';
    }
    return 0;
}