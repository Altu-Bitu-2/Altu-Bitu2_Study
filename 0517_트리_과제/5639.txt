#include <iostream>

using namespace std;

struct node_info { //포인터로 왼쪽, 오른쪽 서브트리를 가리키는 구조체 선언
    int data; //노드에 들어있는 키 값
    node_info *left; // 왼쪽 서브트리 가리키는 구조체
    node_info *right; // 오른쪽 서브트리 가리키는 구조체
};

node_info *makeTree(node_info *node, int data) {//root와 그 값을 인자로 받음
    if (node == NULL) { //이번 노드가 들어가게될 위치, 노드가 비어있다면
        node = new node_info(); //동적 할당
        node->data = data; //노드의 값 대임
        node->left = node->right = NULL; //왼쪽 노드와 오른쪽 노드 모두 null값
    } else if (node->data > data) { //data 값이 현재 비교하고 있는 노드값보다 작다면
        node->left = makeTree(node->left, data); //왼쪽 노드에 삽입
    } else if (node->data < data) { //data 값이 더 크다면
        node->right = makeTree(node->right, data); //오른쪽 노드에 삽입
    }
    return node; //만들어진 트리 리턴
}

//후위 순회
void postorder(node_info *node) {
    if (node == NULL) { //null을 만나면 = root에 도달했다면 리턴
        return;
    }
    postorder(node->left); //왼쪽 서브트리 방문
    postorder(node->right); //오른쪽 서브트리 방문
    cout << node->data << '\n'; //node 값 출력 : 후위 순회한 결과대로 출력
}

/**
 * 맵과 셋 PPT 중 BST 노드 삽입 과정 참고
 *
 * [이진 검색 트리]
 *
 * 1. 포인터로 왼쪽, 오른쪽 서브트리를 가리키는 구조체 선언
 * 2. NULL 만날 때까지 조건에 따라 왼쪽 또는 오른쪽으로 이동
 * 3. 노드가 들어갈 위치를 찾으면 동적할당 후 노드 만들기
 * 4. 완성한 트리를 후위 순회
 */

int main() {
    int input; //트리 전위 순회한 결과 넣을 input

    //입력 & 연산
    node_info *root = NULL; //root 값 null 선언
    while (cin >> input) { //null값 나올 때까지 전위 순회 결과 입력 받음
        root = makeTree(root, input); //트리 root와 그 값을 넣어 트리만드는 함수 호출후 다시 root에 저장
    }

    //출럭
    postorder(root);
    return 0;
}