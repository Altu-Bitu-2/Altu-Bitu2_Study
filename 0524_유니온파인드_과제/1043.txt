#include <iostream>
#include <vector>

using namespace std;

vector<int> parent; // 부모노드 담을 배열

//Find 연산
int findParent(int node) {
    if (parent[node] < 0) { //음수이면
        return node; //정점 노드이므로 그대로 리턴
    }
    return parent[node] = findParent(parent[node]); //부모노드가 맞으면 부모노드 값 갱신
}

//Union 연산
void unionInput(int x, int y) {
    int xp = findParent(x); //x의 부모 저장
    int yp = findParent(y); //y의 부모 저장

    if (xp == yp) { //이미 같은 집합에 있는 경우
        return; //유니온 할 필요 없음.
    }
    //집합의 크기를 비교
    if (parent[xp] < parent[yp]) { //크기가 작은 경우가 더 높이가 큰 노드.  
        parent[xp] += parent[yp]; //새로운 루트 xp 추가
        parent[yp] = xp;
    } else {//높이가 더 작은 노드
        parent[yp] += parent[xp]; //새로운 루트 yp 추가
        parent[xp] = yp;
    }
}

int liarParty(vector<int> &parties) { //거짓말 할 수 있는 파티 개수 출력
    int cnt = 0; //개수 셀 변수
    for (int i = 0; i < parties.size(); i++) { //파티의 사이즈만큼
        if (findParent(parties[i]) != findParent(0)) {//파티의 첫번째 사람이 진실을 아는 사람이 아닐경우
            cnt++; //카운트 증가
        }
    }
    return cnt;
}

/**
 * [거짓말]
 *
 * 1. 각 사람들은 다양한 파티를 통해 연결됐다고 할 수 있음
 * 2. 연결된 사람들은 같은 집합에 속함
 * 3. 각 집합에 속한 사람들 중 한 명이라도 진실을 안다면 그 집합의 사람들이 속한 파티에는 거짓말을 할 수 없음
 * -> 유니온 파인드로 사람들을 집합으로 묶은 뒤, 파티마다 거짓말을 할 수 있는지 확인하기
 * -> 이때, 진실을 아는 사람들의 루트 정점을 0으로 설정해서 유니온 파인드를 통해 집합으로 묶고 시작
 * -> 0과 같은 집합이 아니어야 거짓말을 할 수 있음
 *
 * !주의! 파티 정보를 입력받으며 바로 거짓말 가능 여부를 판단할 수 없음 (예제 입력 4)
 *       각 파티에서 한 사람만 저장해둔 뒤, 마지막에 거짓말 가능 여부 한 번에 판단
 */

int main() {
    int n, m; //사람의 수, 파티의 수

    //입력
    cin >> n >> m;
    parent.assign(n + 1, -1); //각각이 자기 자신이 정점인 루트 정점 배열 선언 및 초기화
    //1번부터 n번까지 접근

    int init, p; //진실을 아는 사람 수, 번호
    cin >> init; //입력
    while (init--) { //진실을 아는 사람들
        cin >> p; //번호 입력
        unionInput(0, p); //진실을 아는 사람들과 집합으로 묶음
    }

    int cnt, first_person, person; // 각 파티마다 오는 사람의 수, 번호
    vector<int> parties; //파티 정보 담을 배열
    while (m--) { //각 파티마다
        cin >> cnt >> first_person; //파티에 오는 사람의 수와 그 번호 입력 받기

        //연산
        parties.push_back(first_person); //파티 정보로 각 파티의 첫번째 사람만 저장
        while (--cnt) { // 파티에 온 사람 수만큼
            cin >> person; //그
            unionInput(first_person, person); //유니온 연산
        }
    }

    //연산 & 출력
    cout << liarParty(parties); //거짓말할 수 있는 파티 개수 출력
    return 0;
}